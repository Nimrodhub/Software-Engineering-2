Assignments
all will be added here


NIMROD KIPROP BIWOTT
SCT221-C004-0749/2017
SOFTWARE ENGINEERING II
BIT2320


Tuxedo (Transactions for Unix, Extended for Distributed Operations) is a middleware platform used to manage distributed transaction processing in distributed computing environments. Tuxedo is a transaction processing system or transaction-oriented middleware, or enterprise application server for a variety of systems and programming languages. Developed by AT&T, it became a software product of Oracle Corporation in 2008 when they acquired BEA Systems. Tuxedo is now part of the Oracle Fusion Middleware.

From the beginning  AT&T designed Tuxedo for high availability and to provide extremely scalable applications to support applications requiring thousands of transactions per second on commonly available distributed systems. The original development targeted the creation and administration of operations support systems for the US telephone company that required online transaction processing (OLTP) capabilities.

The Tuxedo concepts derived from the Loop Maintenance Operations System (LMOS). Tuxedo supported moving the LMOS application off mainframe systems that used Information Management System (IMS) from IBM on to much cheaper distributed systems running (AT&T's own) Unix

Tuxedo is at its core a message routing and queuing system. Requests are sent to named services and Tuxedo uses memory based inter-process communication facilities to queue the requests to servers. The requester is unaware of where the server that actually processes the request is located or how it is implemented. In essence, Tuxedo provided the elements of service-oriented architecture (SOA) decades before the phrase was coined. Tuxedo can use the content of the message to determine what servers should be utilized to receive the request by means of data dependent routing.

The heart of the Tuxedo system is the Bulletin Board (BB). This is a shared memory segment that contains the configuration and state of a Tuxedo domain. Servers, services, transactions, and clients are all registered in the BB providing a global view of their state across the machines within a domain. To coordinate updates to the BB a process called the Bulletin Board Liaison (BBL) runs on each machine to keep the local copy of the BB up-to-date. A master machine runs a process called the "Distinguished Bulletin Board Liaison" that coordinates the updates to the BB. This allows each machine to have a view of what servers, services, transactions, and clients are on each machine within the domain.
Another process on each machine called the Bridge is responsible for passing requests from one machine to another. This allows Tuxedo to spread load across the various machines within a domain and allows servers and services to be running on multiple machines. In addition the BBL and Bridge monitor each other and restart the other should one fail. In the advent of a failure of the master machine, another machine designated as a backup master can take over the function of master machine. Also, since machines within a single domain can be of different architectures (x86, IA32, SPARC, P-Series, etc.), the Bridge is also responsible for handling differences in things like endianness.
Tuxedo applications can utilize a variety of message formats depending upon the type of data that is to be passed. One of the most popular formats is the FML buffer format which is much like a binary XML or ASN.1 format. FML buffers can contain an arbitrary number of named fields of arbitrary type. Fields can be repeated and nested. As it is a self-describing binary format, the processing of fields incurs very little overhead in comparison to the parsing necessary to support something like XML. VIEW buffers are essentially records, C structures, or COBOL copybooks. A VIEW buffer has an external description which allows Tuxedo to access the fields within it if necessary for things like data dependent routing. Other buffer formats include XML, CARRAY (opaque binary data), STRING, and MBSTRING (a string buffer containing multibyte characters.) Tuxedo can automatically and transparently convert FML buffers to and from XML buffers.

Communication concentrators
For remote clients (Java, CORBA, or /WS), Tuxedo provides communication concentrators called listener/handlers that handle the remote network communication. Clients connect to these communication concentrators, which act as proxies for the clients. As clients make requests, the listener/handler uses the local Tuxedo infrastructure to make the request on the behalf of the client. Tuxedo then load balances the requests across the servers within the domain that offer the service even if the server is not on the local machine. This is in contrast to most Java EE application servers where load balancing is done by the client making requests to different machines with the cluster.
Gateways
To facilitate the sharing of services across domains, Tuxedo provides domain gateways. A domain gateway allows importing and exporting services from remote domains. This allows the local domain to see services on remote domains as though they were local services. The domain gateways are responsible for propagating security and transaction context to the remote domain. Besides connecting Tuxedo domains together, domain gateways exist for mainframe systems using TCP/IP, IBM Systems Network Architecture (SNA), or the OSI protocols, and Java Platform, Enterprise Edition application servers. For the mainframe gateways, each system sees the services imported from the remote system as local services and use the local systems infrastructure to interact with those services. This means that Tuxedo sees a CICS transaction as a Tuxedo service, and CICS sees a Tuxedo service as a CICS transaction.
Failure recovery
The BBL on each machine monitors the state of all servers and can automatically restart failed servers. It can also detect hung servers and kill/restart them as required. The BRIDGE process in a clustered environment monitors to BBL, so there are no single points of failure. Any transactions that are affected by a server or machine failure and that have not completed the prepare phase are rolled back. Transactions that have completed the prepare phase but not the commit phase will be committed as part of the Tuxedo boot sequence.
Transaction monitoring and coordination
Tuxedo applications can request that all service invocations and their associated updates to any resources controlled by resource managers (such as databases) be controlled by a transaction. Once the application begins a transaction, all subsequent service invocations and nested invocations are included as part of that transaction, even those services that were executed on remote domains. Tuxedo then coordinates the commit processing with the resource managers to ensure atomic updates to all affected resources. Transactions can be controlled by the application or automatically controlled by the Tuxedo configuration, i.e., container managed transactions.
Queuing subsystem 
Tuxedo provides a queuing subsystem called /Q. This facility provides transient and persistent queues that allows applications to explicitly enqueue and dequeue messages from named queues. Queues can be ordered by message availability time, expiration time, priority, LIFO, FIFO, or a combination. Queues are managed by an XA compliant resource manager allowing queue operations to participate in distributed transactions. An automated queue forwarding server is provided that will remove entries from a queue and invoke an associated Tuxedo services, placing the reply message on an associated reply queue.
Event subsystem
The event subsystem within Tuxedo provides support for unsolicited events as well as brokered events. Unsolicited events allow Tuxedo applications to send out-of-band notifications to clients that aren't necessarily waiting for a response. Brokered events allow application to subscribe to events of interest and when another application posts an event, all applications subscribed to that event receive it. This allows applications to use an event driven model instead of the more typical request/response model. As well this provides a publish and subscribe messaging model that can be combined with /Q.
Add-on Products
Oracle offers a number of add-on products to Tuxedo.
Mainframe re-hosting
In March 2010, Oracle announced two new products. Application Runtime for CICS and Batch along with the associated Oracle Tuxedo Application Rehosting Workbench allows the migration of IBM Customer Information Control System (CICS) and batch applications onto Tuxedo on distributed systems. By providing automated conversion tools, CICS equivalent API pre-processor macro expansion, and a JES-2 like Batch execution environment, the migration of mainframe applications is greatly simplified.
SALT
This product provides a bi-directional web services SOAP/HTTP(S) gateway. This gateway allows Tuxedo services to be accessed by external SOAP clients without making any changes to the Tuxedo service. Likewise Tuxedo applications can call an external web service as though it were a local Tuxedo service. The latest version of SALT supports WS-AtomicTransactions and modules for Apache Web Server, Oracle HTTP Server, and Oracle iPlanet Web Server, that allows the creation of dynamic web content by calling Tuxedo services. In version 12.1.3 SALT added support for RESTful serices.
TSAM Plus
This product provides centralized monitoring capabilities for multiple Tuxedo domains. TSAM Plus agents are deployed on the machines in a Tuxedo domain. These agents collect metric data from the running Tuxedo processes based on a configured policy, and send the data back to the TSAM Plus Manager where it is used historically or in real time. TSAM Plus provides configuration information, call path, call pattern, service execution, transaction, and more monitoring metrics. TSAM Plus also monitors Tuxedo ART CICS and Batch applications. An additional component of TSAM Plus is a plug-in for Oracle Enterprise Manager Cloud Control that provides full operation, configuration, administration, and management of a Tuxedo application.
Tuxedo Mainframe Adapters (TMA)
This product provides a set of gateway processes that run on Tuxedo that communicate with a mainframe using its native protocols. This gateway provides bidirectional integration between mainframe and Tuxedo platforms and makes Tuxedo appear as a remote CICS or IMS region to the mainframe, and the remote CICS or IMS region as another Tuxedo domain to the local Tuxedo application.
JCA Adapter
The Tuxedo JCA adapter provide a JCA 1.5 compliant Resource Adapter that can be deployed to any JEE 1.5 or later JCA container. The adapter supports both the JCA Common Client interface or CCI, as well as the JATMI interface supported by the Oracle WebLogic Tuxedo Connector component of Oracle WebLogic Server. Message inflow and outflow is supported along with distributed transaction support.
Tuxedo Message Queue
Provides enterprise messaging capabilities that combines the features of Oracle MessageQ with Tuxedo. This extends the existing /Q message queuing facility of Tuxedo by providing things like delivery notification, offline messaging, and store and forward capability.
